package com.example.kotlinpractice

/*
* 변수, 함수, 클래스의 접근 범위와 접근 제한자
**/

//scope: 언어차원에서 멤버들을 서로 공유해서 사용할 수 있는 범위를 지정한 단위, 멤버들의 가용 범위를 지정해둔 단위
// 1. 스코프 외부에서는 스코프 내부의 멤버를 참조연산자로만 사용이 가능
// 2. 동일스코프 내에서는 멤버들을 공유할 수 있음
// 3. 하위스코프에서는 상위 스코프 내의 멤버를 재정의 할 수 있다.

//접근 제한자: 스코프 외부에서 스코프 내부에 접그날 때 그 권한을 개발자가 제어할 수 있는 기능
// 패키지 스코프 : public(기본값, 어떤 패키지에서도 접근 가능), internal(같은 모듈 내에서만 접근 가능, private(같은 파일 내에서만 접근 가능)
// 패키지 스코프에서는 protected가 사용되지 않음
// 클래스 스코프 : public(기본값, 클래스 외부에서 마음껏 접근 가능), private(클래스 내부에서만 접근 가능), protected(클래스 자신과 상속받은 클래스에서 접근 가능)
// 클래스 스코프에서는 internal(같은 모듈 내에서만 접근 가능,

val a = "패키지 스코프"

class B {

    val a = "클래스 스코프"

    fun print() {
        println(a)
    }
}

fun main() {
    val a = "함수 스코프"
    println(a)
    B().print()
}