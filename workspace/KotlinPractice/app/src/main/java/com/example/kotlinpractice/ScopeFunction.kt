package com.example.kotlinpractice

/*
* 스코프함수
* */

//람다 함수 특수 케이스
// 1. 람다함수도 여러 구문의 사용이 가능, 여러줄 사용
// 2. 패러미터가 없는 람다함수는 실행할 구문만 입력
// 3. 패러미터가 하나 뿐이라면 it 사용

//스코프 함수: 함수형 언어의 특징을 좀 더 편리하게 사용하도록 제공하는 함수
// 클래스에서 생성한 인스턴스를 스코프함수에 제공하면 인스턴스의 속성이나 함수를 좀 더 깔끔하게 불러 쓸 수 있다.

// apply : 인스턴스를 생성한 후 변수에 담기 전에 초기화 과정을 수행할 떄 많이 사용
fun main() {
    var price = 5000

    // apply : 인스턴스를 생성한 후 변수에 담기 전에 초기화 과정을 수행할 떄 많이 사용
    // main함수와 '별도의 scope'에서 인스턴스의 변수와 함수를 조작하므로 코드가 깔끔해짐
    var a = Book("디모의 코틀린", 10000).apply{
        name = "[초특가]" + name
        discount()
    }

    // run
    //마지막 결괏값을 반환
    //이미 인스턴스가 만들어진 후에 인스턴스의 함수나 속성을 scope 내에서 사용해야 할 때 유용
    a.run {
        println("상품명: ${name}, 가격: ${price}원")
    }

    // with
    // run과 '동일한 기능을 가지만, 단지 인스턴스를 참조연산자 대신 파라미터로 받는 다는 차이 뿐임.
    with(a){
        println("상품명: ${name}, 가격: ${price}원")
    }

    // also, let : 패러미터로 인스턴스를 넘긴 것처럼 it을 통해서 인스턴스를 사용
    // -> 같은 이름의 변수나 함수가 scope 바깥에 중복되어 있는 경우를 방지하기 위해서이다.
    // apply & also : 처리가 끝나면 인스턴스를 반환
    // run & let : 처리가 끝나면 최종값을 반환
    a.let {
        println("상품명: ${it.name}, 가격: ${it.price}원")
    }

}


class Book(var name: String, var price: Int) {
    fun discount() {
        price -= 2000
    }
}


